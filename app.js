// „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥
const app = {
    currentPage: 'home',
    currentPostId: null,
    currentEditId: null,
    filteredAuthor: null,
    searchQuery: '',
    pageNumber: 1,
    postsPerPage: 9,
    likes: {},

    // ÂàùÊúüÂåñ
    async init() {
        this.loadTheme();
        await this.loadData(); // „Éá„Éº„ÇøË™≠„ÅøËæº„Åø„ÇíÂæÖ„Å§
        this.render();
        window.addEventListener('hashchange', () => this.handleRoute());
        this.handleRoute();
    },

    // „É´„Éº„ÉÜ„Ç£„É≥„Ç∞Âá¶ÁêÜ
    handleRoute() {
        const hash = window.location.hash.slice(1) || '/';
        const [path, id] = hash.split('/').filter(Boolean);

        if (hash === '' || hash === '/') {
            this.goHome();
        } else if (path === 'new') {
            this.goNew();
        } else if (path === 'post' && id) {
            this.goDetail(id);
        } else {
            this.goHome();
        }
    },

    // „Éö„Éº„Ç∏ÈÅ∑Áßª
    goHome() {
        window.location.hash = '/';
        this.currentPage = 'home';
        this.currentEditId = null;
        this.filteredAuthor = null;
        document.getElementById('searchInput').value = '';
        document.getElementById('filterAuthorBtn').style.display = 'none';
        this.render();
    },

    goNew() {
        window.location.hash = '/new';
        this.currentPage = 'new';
        this.currentEditId = null;
        this.resetForm();
        this.render();
    },

    goDetail(id) {
        window.location.hash = `/post/${id}`;
        this.currentPage = 'detail';
        this.currentPostId = id;
        this.render();
    },

    // „Éö„Éº„Ç∏Ë°®Á§∫
    render() {
        document.querySelectorAll('.page').forEach(page => page.classList.remove('active'));
        document.getElementById(this.currentPage).classList.add('active');

        if (this.currentPage === 'home') {
            this.renderHome();
        } else if (this.currentPage === 'detail') {
            this.renderDetail();
        } else if (this.currentPage === 'new') {
            this.renderNewForm();
        }
    },

    // „Éõ„Éº„É†„Éö„Éº„Ç∏„É¨„É≥„ÉÄ„É™„É≥„Ç∞
    renderHome() {
        const posts = this.getFilteredPosts();
        const totalPages = Math.ceil(posts.length / this.postsPerPage);
        const start = (this.pageNumber - 1) * this.postsPerPage;
        const end = start + this.postsPerPage;
        const paginatedPosts = posts.slice(start, end);

        const postsList = document.getElementById('postsList');
        postsList.innerHTML = '';

        if (paginatedPosts.length === 0) {
            document.getElementById('emptyState').style.display = 'block';
            document.getElementById('pagination').innerHTML = '';
            return;
        }

        document.getElementById('emptyState').style.display = 'none';

        paginatedPosts.forEach(post => {
            const card = document.createElement('div');
            card.className = 'post-card';
            card.onclick = () => this.goDetail(post.id);

            const date = new Date(post.createdAt);
            const formattedDate = this.formatDate(date);

            card.innerHTML = `
                <div class="post-header">
                    <div>
                        <div class="post-author" onclick="event.stopPropagation(); app.filterByAuthor('${this.escapeHtml(post.name)}')">${this.escapeHtml(post.name)}</div>
                        <div class="post-date">${formattedDate}</div>
                    </div>
                </div>
                <h3 class="post-title">${this.escapeHtml(post.title)}</h3>
                <p class="post-preview">${this.escapeHtml(post.body)}</p>
                <div class="post-meta">
                    <div class="post-stats">
                        <span>üí¨ ${post.comments ? post.comments.length : 0}</span>
                        <span id="like-count-${post.id}">‚ù§Ô∏è ${this.likes[post.id] || 0}</span>
                    </div>
                </div>
            `;

            postsList.appendChild(card);
        });

        this.renderPagination(totalPages);
    },

    // „Éö„Éº„Ç∏„Éç„Éº„Ç∑„Éß„É≥
    renderPagination(totalPages) {
        const pagination = document.getElementById('pagination');
        pagination.innerHTML = '';

        if (totalPages <= 1) return;

        const prevBtn = document.createElement('button');
        prevBtn.textContent = '‚Üê Ââç„ÅÆ„Éö„Éº„Ç∏';
        prevBtn.disabled = this.pageNumber === 1;
        prevBtn.onclick = () => {
            if (this.pageNumber > 1) {
                this.pageNumber--;
                this.renderHome();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        };
        pagination.appendChild(prevBtn);

        // „Éö„Éº„Ç∏Áï™Âè∑Ë°®Á§∫
        const startPage = Math.max(1, this.pageNumber - 2);
        const endPage = Math.min(totalPages, this.pageNumber + 2);

        if (startPage > 1) {
            const btn = document.createElement('button');
            btn.textContent = '1';
            btn.onclick = () => {
                this.pageNumber = 1;
                this.renderHome();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            };
            pagination.appendChild(btn);

            if (startPage > 2) {
                const dots = document.createElement('span');
                dots.textContent = '...';
                dots.className = 'pagination-dots';
                pagination.appendChild(dots);
            }
        }

        for (let i = startPage; i <= endPage; i++) {
            const btn = document.createElement('button');
            btn.textContent = i;
            btn.className = this.pageNumber === i ? 'active' : '';
            btn.onclick = () => {
                this.pageNumber = i;
                this.renderHome();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            };
            pagination.appendChild(btn);
        }

        if (endPage < totalPages) {
            if (endPage < totalPages - 1) {
                const dots = document.createElement('span');
                dots.textContent = '...';
                dots.className = 'pagination-dots';
                pagination.appendChild(dots);
            }

            const btn = document.createElement('button');
            btn.textContent = totalPages;
            btn.onclick = () => {
                this.pageNumber = totalPages;
                this.renderHome();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            };
            pagination.appendChild(btn);
        }

        const nextBtn = document.createElement('button');
        nextBtn.textContent = 'Ê¨°„ÅÆ„Éö„Éº„Ç∏ ‚Üí';
        nextBtn.disabled = this.pageNumber === totalPages;
        nextBtn.onclick = () => {
            if (this.pageNumber < totalPages) {
                this.pageNumber++;
                this.renderHome();
                window.scrollTo({ top: 0, behavior: 'smooth' });
            }
        };
        pagination.appendChild(nextBtn);
    },

    // Ë©≥Á¥∞„Éö„Éº„Ç∏„É¨„É≥„ÉÄ„É™„É≥„Ç∞
    renderDetail() {
        const post = this.data.posts.find(p => p.id === this.currentPostId);
        if (!post) {
            this.goHome();
            return;
        }

        const date = new Date(post.createdAt);
        const formattedDate = this.formatDate(date);

        document.getElementById('detailTitle').textContent = post.title;
        document.getElementById('detailAuthor').textContent = post.name;
        document.getElementById('detailDate').textContent = formattedDate;
        document.getElementById('detailBody').textContent = post.body;

        // „ÅÑ„ÅÑ„Å≠„Éú„Çø„É≥
        const likeBtn = document.getElementById('likeBtn');
        if (this.likes[post.id]) {
            likeBtn.classList.add('liked');
        } else {
            likeBtn.classList.remove('liked');
        }

        // „Ç≥„É°„É≥„ÉàË°®Á§∫
        this.renderComments(post.id);
    },

    // „Ç≥„É°„É≥„ÉàË°®Á§∫
    renderComments(postId) {
        const post = this.data.posts.find(p => p.id === postId);
        const commentsList = document.getElementById('commentsList');
        const noComments = document.getElementById('noComments');

        commentsList.innerHTML = '';

        if (!post.comments || post.comments.length === 0) {
            noComments.style.display = 'block';
            return;
        }

        noComments.style.display = 'none';

        post.comments.forEach((comment, index) => {
            const commentEl = document.createElement('div');
            commentEl.className = 'comment';

            const date = new Date(comment.createdAt);
            const formattedDate = this.formatDate(date);

            commentEl.innerHTML = `
                <div class="comment-header">
                    <div class="comment-author">${this.escapeHtml(comment.name)}</div>
                    <div class="comment-date">${formattedDate}</div>
                </div>
                <div class="comment-body">${this.escapeHtml(comment.body)}</div>
                <div class="comment-actions-small">
                    <button class="comment-delete-btn" onclick="app.deleteComment('${postId}', ${index})">ÂâäÈô§</button>
                </div>
            `;

            commentsList.appendChild(commentEl);
        });
    },

    // Êñ∞Ë¶èÊäïÁ®ø„Éï„Ç©„Éº„É†„É¨„É≥„ÉÄ„É™„É≥„Ç∞
    renderNewForm() {
        const formTitle = document.getElementById('formTitle');
        const nameInput = document.getElementById('nameInput');
        const titleInput = document.getElementById('titleInput');
        const bodyInput = document.getElementById('bodyInput');

        if (this.currentEditId) {
            formTitle.textContent = 'ÊäïÁ®ø„ÇíÁ∑®ÈõÜ';
            const post = this.data.posts.find(p => p.id === this.currentEditId);
            if (post) {
                nameInput.value = post.name;
                titleInput.value = post.title;
                bodyInput.value = post.body;
            }
        } else {
            formTitle.textContent = 'Êñ∞Ë¶èÊäïÁ®ø';
            this.resetForm();
        }
    },

    // „Éï„Ç©„Éº„É†„É™„Çª„ÉÉ„Éà
    resetForm() {
        document.getElementById('postForm').reset();
        document.querySelectorAll('.form-error').forEach(el => el.classList.remove('show'));
        document.querySelectorAll('.form-input, .form-textarea').forEach(el => el.classList.remove('error'));
    },

    // „Éï„Ç©„Éº„É†ÈÄÅ‰ø°
    async handleSubmit(event) {
        event.preventDefault();

        const name = document.getElementById('nameInput').value.trim();
        const title = document.getElementById('titleInput').value.trim();
        const body = document.getElementById('bodyInput').value.trim();

        // „Éê„É™„Éá„Éº„Ç∑„Éß„É≥
        let isValid = true;
        if (!name) {
            this.showError('nameInput', 'nameError', 'ÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            isValid = false;
        }
        if (!title) {
            this.showError('titleInput', 'titleError', '„Çø„Ç§„Éà„É´„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            isValid = false;
        }
        if (!body) {
            this.showError('bodyInput', 'bodyError', 'Ê¶ÇË¶Å„ÉªÂ≠¶„Å≥„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ');
            isValid = false;
        }

        if (!isValid) return;

        if (this.currentEditId) {
            // Á∑®ÈõÜ
            const post = this.data.posts.find(p => p.id === this.currentEditId);
            if (post) {
                post.name = name;
                post.title = title;
                post.body = body;
                post.updatedAt = new Date().toISOString();
            }
            this.showToast('ÊäïÁ®ø„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü', 'success');
        } else {
            // Êñ∞Ë¶è‰ΩúÊàê
            const newPost = {
                id: Date.now().toString(),
                name,
                title,
                body,
                createdAt: new Date().toISOString(),
                updatedAt: new Date().toISOString(),
                comments: []
            };
            this.data.posts.unshift(newPost);
            this.showToast('ÊäïÁ®ø„Çí‰øùÂ≠ò„Åó„Åæ„Åó„Åü', 'success');
        }

        await this.saveData();
        this.goHome();
    },

    // „Ç®„É©„ÉºË°®Á§∫
    showError(inputId, errorId, message) {
        const input = document.getElementById(inputId);
        const error = document.getElementById(errorId);
        input.classList.add('error');
        error.textContent = message;
        error.classList.add('show');
    },

    // Ê§úÁ¥¢Âá¶ÁêÜ
    handleSearch() {
        this.searchQuery = document.getElementById('searchInput').value.toLowerCase();
        this.pageNumber = 1;
        this.renderHome();
    },

    // ‰ΩúËÄÖ„Åß„Éï„Ç£„É´„Çø
    filterByAuthor(author) {
        this.filteredAuthor = author;
        this.searchQuery = '';
        this.pageNumber = 1;
        document.getElementById('searchInput').value = '';
        document.getElementById('filterAuthorBtn').style.display = 'inline-block';
        this.renderHome();
    },

    // „Éï„Ç£„É´„Çø„ÇØ„É™„Ç¢
    clearAuthorFilter() {
        this.filteredAuthor = null;
        this.pageNumber = 1;
        document.getElementById('filterAuthorBtn').style.display = 'none';
        this.renderHome();
    },

    // „Éï„Ç£„É´„ÇøÊ∏à„ÅøÊäïÁ®øÂèñÂæóÔºàÊñ∞„Åó„ÅÑÈ†Ü„Å´„ÇΩ„Éº„ÉàÔºâ
    getFilteredPosts() {
        let posts = [...this.data.posts];

        // ÊäïÁ®øÊó•ÊôÇ„ÅåÊñ∞„Åó„ÅÑÈ†Ü„Å´„ÇΩ„Éº„Éà
        posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

        if (this.filteredAuthor) {
            posts = posts.filter(p => p.name === this.filteredAuthor);
        }

        if (this.searchQuery) {
            posts = posts.filter(p =>
                p.title.toLowerCase().includes(this.searchQuery) ||
                p.body.toLowerCase().includes(this.searchQuery) ||
                p.name.toLowerCase().includes(this.searchQuery)
            );
        }

        return posts;
    },

    // ÊäïÁ®øÁ∑®ÈõÜ
    editPost() {
        this.currentEditId = this.currentPostId;
        this.goNew();
    },

    // ÊäïÁ®øÂâäÈô§
    deletePost() {
        document.getElementById('deleteModal').classList.add('active');
    },

    // ÂâäÈô§Á¢∫Ë™ç
    async confirmDelete() {
        this.data.posts = this.data.posts.filter(p => p.id !== this.currentPostId);
        delete this.likes[this.currentPostId];
        await this.saveData();
        await this.saveLikes();
        this.closeModal();
        this.showToast('ÊäïÁ®ø„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü', 'success');
        this.goHome();
    },

    // „É¢„Éº„ÉÄ„É´„ÇØ„É≠„Éº„Ç∫
    closeModal() {
        document.getElementById('deleteModal').classList.remove('active');
    },

    // „ÅÑ„ÅÑ„Å≠„Éà„Ç∞„É´
    async toggleLike() {
        if (this.likes[this.currentPostId]) {
            this.likes[this.currentPostId]--;
            if (this.likes[this.currentPostId] === 0) {
                delete this.likes[this.currentPostId];
            }
        } else {
            this.likes[this.currentPostId] = 1;
        }
        await this.saveLikes();
        this.renderDetail();
    },

    // „Ç≥„É°„É≥„ÉàËøΩÂä†
    async addComment() {
        const nameInput = document.getElementById('commentNameInput');
        const bodyInput = document.getElementById('commentBodyInput');

        const name = nameInput.value.trim();
        const body = bodyInput.value.trim();

        if (!name || !body) {
            this.showToast('ÂêçÂâç„Å®„Ç≥„É°„É≥„Éà„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ', 'error');
            return;
        }

        const post = this.data.posts.find(p => p.id === this.currentPostId);
        if (!post) return;

        if (!post.comments) {
            post.comments = [];
        }

        post.comments.push({
            name,
            body,
            createdAt: new Date().toISOString()
        });

        await this.saveData();
        nameInput.value = '';
        bodyInput.value = '';
        this.showToast('„Ç≥„É°„É≥„Éà„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü', 'success');
        this.renderComments(this.currentPostId);
    },

    // „Ç≥„É°„É≥„ÉàÂâäÈô§
    async deleteComment(postId, index) {
        if (confirm('„Åì„ÅÆ„Ç≥„É°„É≥„Éà„ÇíÂâäÈô§„Åó„Åæ„Åô„ÅãÔºü')) {
            const post = this.data.posts.find(p => p.id === postId);
            if (post && post.comments) {
                post.comments.splice(index, 1);
                await this.saveData();
                this.showToast('„Ç≥„É°„É≥„Éà„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü', 'success');
                this.renderComments(postId);
            }
        }
    },

    // „Éà„Éº„Çπ„ÉàÈÄöÁü•
    showToast(message, type = 'success') {
        const toast = document.createElement('div');
        toast.className = `toast ${type}`;
        toast.textContent = message;
        document.body.appendChild(toast);

        setTimeout(() => {
            toast.remove();
        }, 3000);
    },

    // Êó•‰ªò„Éï„Ç©„Éº„Éû„ÉÉ„Éà
    formatDate(date) {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        return `${year}-${month}-${day} ${hours}:${minutes}`;
    },

    // HTML „Ç®„Çπ„Ç±„Éº„Éó
    escapeHtml(text) {
        const map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, m => map[m]);
    },

    // „Éá„Éº„ÇøÁÆ°ÁêÜ
    data: {
        posts: []
    },

    // „Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÔºàwindow.storage API„Çí‰ΩøÁî®Ôºâ
    async loadData() {
        try {
            const result = await window.storage.get('learningAppData');
            if (result && result.value) {
                this.data = JSON.parse(result.value);
            } else {
                // ÂàùÂõû„Ç¢„ÇØ„Çª„ÇπÊôÇ„ÅØÂàùÊúü„Éá„Éº„Çø„Çí‰ΩúÊàê„Åó„Å¶Ë°®Á§∫
                await this.initDummyData();
            }
        } catch (error) {
            // „Ç®„É©„ÉºÊôÇ„ÇÇÂàùÊúü„Éá„Éº„Çø„Çí‰ΩúÊàê
            console.log('„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº„ÄÅÂàùÊúü„Éá„Éº„Çø„Çí‰ΩúÊàê„Åó„Åæ„Åô');
            await this.initDummyData();
        }
        await this.loadLikes();
        
        // „Éá„Éº„ÇøË™≠„ÅøËæº„ÅøÂæå„Å´„Éõ„Éº„É†„Éö„Éº„Ç∏„ÇíÂÜç„É¨„É≥„ÉÄ„É™„É≥„Ç∞
        if (this.currentPage === 'home') {
            this.renderHome();
        }
    },

    // ÂàùÊúü„Éá„Éº„Çø‰ΩúÊàê
    async initDummyData() {
        this.data.posts = [
            {
                id: '1',
                name: 'Áî∞‰∏≠Â§™ÈÉé',
                title: '7„Å§„ÅÆÁøíÊÖ£„ÇíË™≠„Çì„Åß',
                body: '„Çπ„ÉÜ„Ç£„Éº„Éñ„É≥„Éª„Ç≥„É¥„Ç£„Éº„ÅÆ„Äå7„Å§„ÅÆÁøíÊÖ£„Äç„ÇíË™≠„Åø„Åæ„Åó„Åü„ÄÇÁâπ„Å´„ÄåÁ¨¨2„ÅÆÁøíÊÖ£ÔºöÁµÇ„Çè„Çä„ÇíÊÄù„ÅÑÊèè„Åè„Åì„Å®„Åã„ÇâÂßã„ÇÅ„Çã„Äç„ÅåÂç∞Ë±°ÁöÑ„Åß„Åó„Åü„ÄÇ‰∫∫Áîü„ÅÆÁõÆÁöÑ„ÇíÊòéÁ¢∫„Å´„Åô„Çã„Åì„Å®„ÅÆÈáçË¶ÅÊÄß„ÇíÊîπ„ÇÅ„Å¶Ë™çË≠ò„Åó„Åæ„Åó„Åü„ÄÇ„Åì„Çå„Åã„Çâ„ÅØ„ÄÅÊØéÊó•„ÅÆË°åÂãï„Åå‰∫∫Áîü„ÅÆÁõÆÁöÑ„Å´Ê≤ø„Å£„Å¶„ÅÑ„Çã„Åã„ÇíÁ¢∫Ë™ç„Åó„Å¶„Åã„ÇâË°åÂãï„Åô„Çã„Çà„ÅÜ„Å´„Åó„Åü„ÅÑ„Åß„Åô„ÄÇ',
                createdAt: new Date(Date.now() - 3600000).toISOString(), // 1ÊôÇÈñìÂâç
                updatedAt: new Date(Date.now() - 3600000).toISOString(),
                comments: [
                    {
                        name: 'Èà¥Êú®Ëä±Â≠ê',
                        body: '„Çè„Åã„Çä„Åæ„ÅôÔºÅÁßÅ„ÇÇÂêå„ÅòÊú¨„ÇíË™≠„Çì„Åß„ÄÅ‰∫∫ÁîüË¶≥„ÅåÂ§â„Çè„Çä„Åæ„Åó„Åü„ÄÇ',
                        createdAt: new Date(Date.now() - 1800000).toISOString()
                    }
                ]
            },
            {
                id: '2',
                name: 'Èà¥Êú®Ëä±Â≠ê',
                title: '„Éá„Ç∂„Ç§„É≥ÊÄùËÄÉ„Å´„Å§„ÅÑ„Å¶Â≠¶„Çì„Å†„Åì„Å®',
                body: '„Éá„Ç∂„Ç§„É≥ÊÄùËÄÉ„ÅÆ„ÉØ„Éº„ÇØ„Ç∑„Éß„ÉÉ„Éó„Å´ÂèÇÂä†„Åó„Åæ„Åó„Åü„ÄÇ„É¶„Éº„Ç∂„Éº‰∏≠ÂøÉ„ÅÆ„Ç¢„Éó„É≠„Éº„ÉÅ„ÅåÈáçË¶Å„Å†„Å®„ÅÑ„ÅÜ„Åì„Å®„ÇíÂ≠¶„Å≥„Åæ„Åó„Åü„ÄÇÂïèÈ°å„ÇíËß£„Åè„ÅÆ„Åß„ÅØ„Å™„Åè„ÄÅ„É¶„Éº„Ç∂„Éº„ÅÆÊú¨ÂΩì„ÅÆ„Éã„Éº„Ç∫„ÇíÁêÜËß£„Åô„Çã„Åì„Å®„Åã„ÇâÂßã„Åæ„Çã„Çì„Åß„Åô„Å≠„ÄÇ„Åì„Çå„Åã„Çâ„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅßÂÆüË∑µ„Åó„Å¶„Åø„Åü„ÅÑ„Åß„Åô„ÄÇ',
                createdAt: new Date(Date.now() - 7200000).toISOString(), // 2ÊôÇÈñìÂâç
                updatedAt: new Date(Date.now() - 7200000).toISOString(),
                comments: []
            },
            {
                id: '3',
                name: '‰ΩêËó§Ê¨°ÈÉé',
                title: 'JavaScript„ÅÆÈùûÂêåÊúüÂá¶ÁêÜ„Å´„Å§„ÅÑ„Å¶',
                body: 'JavaScript„ÅÆÈùûÂêåÊúüÂá¶ÁêÜÔºàPromise„ÄÅasync/awaitÔºâ„Å´„Å§„ÅÑ„Å¶Ê∑±„ÅèÂ≠¶„Å≥„Åæ„Åó„Åü„ÄÇ„Ç≥„Éº„É´„Éê„ÉÉ„ÇØÂú∞ÁçÑ„Åã„ÇâËß£Êîæ„Åï„Çå„Çã„Åü„ÇÅ„ÅÆÈáçË¶Å„Å™„Éë„Çø„Éº„É≥„Åß„Åô„Å≠„ÄÇÁâπ„Å´async/await„ÅÆÊßãÊñá„ÅØ„ÄÅÂêåÊúüÁöÑ„Å™„Ç≥„Éº„Éâ„ÅÆ„Çà„ÅÜ„Å´Ë¶ã„Åà„Çã„ÅÆ„Åß„ÄÅÂèØË™≠ÊÄß„ÅåÂ§ßÂπÖ„Å´Âêë‰∏ä„Åó„Åæ„Åô„ÄÇ‰ªäÂæå„ÅÆ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅßÁ©çÊ•µÁöÑ„Å´‰Ωø„Å£„Å¶„ÅÑ„Åç„Åü„ÅÑ„Åß„Åô„ÄÇ',
                createdAt: new Date(Date.now() - 86400000).toISOString(), // 1Êó•Ââç
                updatedAt: new Date(Date.now() - 86400000).toISOString(),
                comments: []
            },
            {
                id: '4',
                name: 'Â±±Áî∞Ëä±Â≠ê',
                title: '„Ç¢„Ç∏„É£„Ç§„É´ÈñãÁô∫„ÅÆÂÆüË∑µ',
                body: '„ÉÅ„Éº„É†„Åß„Ç¢„Ç∏„É£„Ç§„É´ÈñãÁô∫„ÇíÂ∞éÂÖ•„Åó„Å¶3„É∂Êúà„ÅåÁµå„Å°„Åæ„Åó„Åü„ÄÇ„Çπ„Éó„É™„É≥„Éà„Åî„Å®„Å´ÊåØ„ÇäËøî„Çä„ÇíË°å„ÅÜ„Åì„Å®„Åß„ÄÅÁ∂ôÁ∂öÁöÑ„Å™ÊîπÂñÑ„ÅåÂÆüÁèæ„Åß„Åç„Å¶„ÅÑ„Åæ„Åô„ÄÇÁâπ„Å´„Éá„Ç§„É™„Éº„Çπ„Çø„É≥„Éâ„Ç¢„ÉÉ„Éó„Éü„Éº„ÉÜ„Ç£„É≥„Ç∞„Åå„ÄÅ„ÉÅ„Éº„É†„ÅÆ‰∏Ä‰ΩìÊÑü„ÇíÈ´ò„ÇÅ„Çã„ÅÆ„Å´ÂäπÊûúÁöÑ„Åß„Åó„Åü„ÄÇ',
                createdAt: new Date(Date.now() - 172800000).toISOString(), // 2Êó•Ââç
                updatedAt: new Date(Date.now() - 172800000).toISOString(),
                comments: []
            },
            {
                id: '5',
                name: 'È´òÊ©ãÂÅ•Â§™',
                title: 'UX„Éá„Ç∂„Ç§„É≥„ÅÆÂü∫Á§é„ÇíÂ≠¶„Å∂',
                body: '„É¶„Éº„Ç∂„Éº„Ç®„ÇØ„Çπ„Éö„É™„Ç®„É≥„Çπ„Éá„Ç∂„Ç§„É≥„ÅÆÂü∫Á§éË¨õÂ∫ß„ÇíÂèóË¨õ„Åó„Åæ„Åó„Åü„ÄÇ„Éö„É´„ÇΩ„ÉäË®≠ÂÆö„ÇÑ„É¶„Éº„Ç∂„Éº„Ç∏„É£„Éº„Éã„Éº„Éû„ÉÉ„Éó„ÅÆ‰ΩúÊàêÊñπÊ≥ï„ÇíÂ≠¶„Å≥„ÄÅ„É¶„Éº„Ç∂„ÉºË¶ñÁÇπ„ÅßÁâ©‰∫ã„ÇíËÄÉ„Åà„ÇãÈáçË¶ÅÊÄß„ÇíÂÆüÊÑü„Åó„Åæ„Åó„Åü„ÄÇ‰ªäÂæå„ÅÆÂà∂‰ΩúÁâ©„Å´Ê¥ª„Åã„Åó„Å¶„ÅÑ„Åç„Åü„ÅÑ„Åß„Åô„ÄÇ',
                createdAt: new Date(Date.now() - 259200000).toISOString(), // 3Êó•Ââç
                updatedAt: new Date(Date.now() - 259200000).toISOString(),
                comments: []
            },
            {
                id: '6',
                name: '‰ºäËó§ÁæéÂí≤',
                title: 'React„ÅÆÁä∂ÊÖãÁÆ°ÁêÜ„ÇíÂ≠¶„Çì„Åß',
                body: 'React„ÅÆÁä∂ÊÖãÁÆ°ÁêÜ„Å´„Å§„ÅÑ„Å¶Ê∑±„ÅèÂ≠¶„Å≥„Åæ„Åó„Åü„ÄÇuseState„ÇÑuseContext„Å™„Å©„ÄÅÊßò„ÄÖ„Å™„Éï„ÉÉ„ÇØ„Çí‰Ωø„ÅÑ„Åì„Å™„Åô„Åì„Å®„Åß„ÄÅ„Çà„ÇäÂäπÁéáÁöÑ„Å™„Ç≥„É≥„Éù„Éº„Éç„É≥„ÉàË®≠Ë®à„Åå„Åß„Åç„Çã„Åì„Å®„ÇíÂÆüÊÑü„Åó„Åæ„Åó„Åü„ÄÇÁâπ„Å´„Ç´„Çπ„Çø„É†„Éï„ÉÉ„ÇØ„ÅÆ‰ΩúÊàê„ÅØ„ÄÅ„Ç≥„Éº„Éâ„ÅÆÂÜçÂà©Áî®ÊÄß„ÇíÈ´ò„ÇÅ„ÇãÁ¥†Êô¥„Çâ„Åó„ÅÑÊâãÊ≥ï„Å†„Å®ÊÄù„ÅÑ„Åæ„Åô„ÄÇ',
                createdAt: new Date(Date.now() - 345600000).toISOString(), // 4Êó•Ââç
                updatedAt: new Date(Date.now() - 345600000).toISOString(),
                comments: []
            },
            {
                id: '7',
                name: '‰∏≠ÊùëÁøîÂ§™',
                title: '„ÇØ„É™„Éº„É≥„Ç≥„Éº„Éâ„ÇíË™≠„Çì„Åß',
                body: '„É≠„Éê„Éº„Éà„ÉªC„Éª„Éû„Éº„ÉÅ„É≥„ÅÆ„Äå„ÇØ„É™„Éº„É≥„Ç≥„Éº„Éâ„Äç„ÇíË™≠„Åø„Åæ„Åó„Åü„ÄÇÈñ¢Êï∞„ÅØÂ∞è„Åï„Åè„ÄÅ‰∏Ä„Å§„ÅÆ„Åì„Å®„Å†„Åë„Çí„Åô„Åπ„Åç„ÄÅ„Å®„ÅÑ„ÅÜÂéüÂâá„ÅåÁâπ„Å´Âç∞Ë±°ÁöÑ„Åß„Åó„Åü„ÄÇ„Ç≥„Éº„Éâ„ÅØÊõ∏„ÅèÊôÇÈñì„Çà„ÇäË™≠„ÇÄÊôÇÈñì„ÅÆÊñπ„ÅåÈï∑„ÅÑ„ÅÆ„Åß„ÄÅÂèØË™≠ÊÄß„ÇíÊúÄÂÑ™ÂÖà„Åô„Åπ„Åç„Å†„Å®Êîπ„ÇÅ„Å¶Ë™çË≠ò„Åó„Åæ„Åó„Åü„ÄÇ',
                createdAt: new Date(Date.now() - 432000000).toISOString(), // 5Êó•Ââç
                updatedAt: new Date(Date.now() - 432000000).toISOString(),
                comments: []
            },
            {
                id: '8',
                name: 'Â∞èÊûóÊÑõ',
                title: 'TypeScript„ÅÆÂûã„Ç∑„Çπ„ÉÜ„É†',
                body: 'TypeScript„ÅÆÂûã„Ç∑„Çπ„ÉÜ„É†„Å´„Å§„ÅÑ„Å¶Â≠¶„Å≥„Åæ„Åó„Åü„ÄÇ„Ç∏„Çß„Éç„É™„ÇØ„Çπ„ÇÑÂûã„Ç¨„Éº„Éâ„ÄÅ„É¶„Éã„Ç™„É≥Âûã„Å™„Å©„ÄÅÂº∑Âäõ„Å™ÂûãÊ©üËÉΩ„Å´„Çà„Çä„ÄÅ„Éê„Ç∞„ÅÆÊó©ÊúüÁô∫Ë¶ã„Å®IDE„ÅÆË£úÂÆåÊ©üËÉΩÂêë‰∏ä„ÅåÂÆüÁèæ„Åß„Åç„Åæ„Åô„ÄÇÊúÄÂàù„ÅØË§áÈõë„Å´ÊÑü„Åò„Åæ„Åó„Åü„Åå„ÄÅÊÖ£„Çå„Çã„Å®ÊâãÊîæ„Åõ„Å™„Åè„Å™„Çä„Åæ„Åó„Åü„ÄÇ',
                createdAt: new Date(Date.now() - 518400000).toISOString(), // 6Êó•Ââç
                updatedAt: new Date(Date.now() - 518400000).toISOString(),
                comments: []
            },
            {
                id: '9',
                name: 'Ê∏°Ëæ∫Â§ßËºî',
                title: '„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞„ÅÆÈáçË¶ÅÊÄß',
                body: '„Éû„Éº„ÉÅ„É≥„Éª„Éï„Ç°„Ç¶„É©„Éº„ÅÆ„Äå„É™„Éï„Ç°„ÇØ„Çø„É™„É≥„Ç∞„Äç„ÇíË™≠„Åø„Åæ„Åó„Åü„ÄÇÊó¢Â≠ò„ÅÆ„Ç≥„Éº„Éâ„ÇíÊîπÂñÑ„Åô„ÇãÊäÄË°ì„ÅÆÈáçË¶ÅÊÄß„ÇíÂ≠¶„Å≥„Åæ„Åó„Åü„ÄÇÂ∞è„Åï„Å™„Çπ„ÉÜ„ÉÉ„Éó„ÅßÁ∂ôÁ∂öÁöÑ„Å´ÊîπÂñÑ„Åô„Çã„Åì„Å®„Åß„ÄÅ„Ç≥„Éº„Éâ„ÅÆÂìÅË≥™„Çí‰øù„Å°„Å™„Åå„ÇâÊ©üËÉΩ„ÇíËøΩÂä†„Åß„Åç„Çã„Åì„Å®„ÇíÂÆüÊÑü„Åó„Åæ„Åó„Åü„ÄÇ„ÉÜ„Çπ„Éà„ÅÆÈáçË¶ÅÊÄß„ÇÇÊîπ„ÇÅ„Å¶Ë™çË≠ò„Åó„Åæ„Åó„Åü„ÄÇ',
                createdAt: new Date(Date.now() - 604800000).toISOString(), // 7Êó•Ââç
                updatedAt: new Date(Date.now() - 604800000).toISOString(),
                comments: []
            }
        ];
        await this.saveData();
    },

    // „Éá„Éº„Çø‰øùÂ≠òÔºàwindow.storage API„Çí‰ΩøÁî®Ôºâ
    async saveData() {
        try {
            await window.storage.set('learningAppData', JSON.stringify(this.data));
        } catch (error) {
            console.error('„Éá„Éº„Çø‰øùÂ≠ò„Ç®„É©„Éº:', error);
            this.showToast('„Éá„Éº„Çø„ÅÆ‰øùÂ≠ò„Å´Â§±Êïó„Åó„Åæ„Åó„Åü', 'error');
        }
    },

    // „ÅÑ„ÅÑ„Å≠Ë™≠„ÅøËæº„Åø
    async loadLikes() {
        try {
            const result = await window.storage.get('learningAppLikes');
            if (result && result.value) {
                this.likes = JSON.parse(result.value);
            }
        } catch (error) {
            console.log('„ÅÑ„ÅÑ„Å≠„Éá„Éº„ÇøË™≠„ÅøËæº„Åø„Ç®„É©„Éº');
        }
    },

    // „ÅÑ„ÅÑ„Å≠‰øùÂ≠ò
    async saveLikes() {
        try {
            await window.storage.set('learningAppLikes', JSON.stringify(this.likes));
        } catch (error) {
            console.error('„ÅÑ„ÅÑ„Å≠‰øùÂ≠ò„Ç®„É©„Éº:', error);
        }
    },

    // „ÉÜ„Éº„ÉûÁÆ°ÁêÜ
    async loadTheme() {
        try {
            const result = await window.storage.get('learningAppTheme');
            const theme = result?.value || 'light';
            if (theme === 'dark') {
                document.body.classList.add('dark-mode');
                document.querySelector('.theme-toggle').textContent = '‚òÄÔ∏è';
            }
        } catch (error) {
            // „Éá„Éï„Ç©„É´„Éà„ÅØ„É©„Ç§„Éà„É¢„Éº„Éâ
        }
    },

    async toggleTheme() {
        document.body.classList.toggle('dark-mode');
        const isDark = document.body.classList.contains('dark-mode');
        try {
            await window.storage.set('learningAppTheme', isDark ? 'dark' : 'light');
        } catch (error) {
            console.error('„ÉÜ„Éº„Éû‰øùÂ≠ò„Ç®„É©„Éº:', error);
        }
        document.querySelector('.theme-toggle').textContent = isDark ? '‚òÄÔ∏è' : 'üåô';
    }
};

// „Ç¢„Éó„É™Ëµ∑Âãï
document.addEventListener('DOMContentLoaded', () => app.init());
